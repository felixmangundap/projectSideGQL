// Code generated by Prisma (prisma@1.25.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  info: (where?: InfoWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  uRL: (where?: URLWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  infoes: (args?: {
    where?: InfoWhereInput;
    orderBy?: InfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Info>;
  infoesConnection: (args?: {
    where?: InfoWhereInput;
    orderBy?: InfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InfoConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectPromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  uRLs: (args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<URL>;
  uRLsConnection: (args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => URLConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VotePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInfo: (data: InfoCreateInput) => InfoPromise;
  updateManyInfoes: (args: {
    data: InfoUpdateManyMutationInput;
    where?: InfoWhereInput;
  }) => BatchPayloadPromise;
  deleteManyInfoes: (where?: InfoWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createURL: (data: URLCreateInput) => URLPromise;
  updateManyURLs: (args: {
    data: URLUpdateManyMutationInput;
    where?: URLWhereInput;
  }) => BatchPayloadPromise;
  deleteManyURLs: (where?: URLWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  info: (
    where?: InfoSubscriptionWhereInput
  ) => InfoSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  uRL: (
    where?: URLSubscriptionWhereInput
  ) => URLSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type URLOrderByInput =
  | "devpost_ASC"
  | "devpost_DESC"
  | "github_ASC"
  | "github_DESC"
  | "slack_ASC"
  | "slack_DESC"
  | "instagram_ASC"
  | "instagram_DESC"
  | "twitter_ASC"
  | "twitter_DESC"
  | "web_ASC"
  | "web_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InfoOrderByInput =
  | "title_ASC"
  | "title_DESC"
  | "oneLiner_ASC"
  | "oneLiner_DESC"
  | "description_ASC"
  | "description_DESC"
  | "stage_ASC"
  | "stage_DESC"
  | "private_ASC"
  | "private_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateOneWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface InfoWhereInput {
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  oneLiner?: String;
  oneLiner_not?: String;
  oneLiner_in?: String[] | String;
  oneLiner_not_in?: String[] | String;
  oneLiner_lt?: String;
  oneLiner_lte?: String;
  oneLiner_gt?: String;
  oneLiner_gte?: String;
  oneLiner_contains?: String;
  oneLiner_not_contains?: String;
  oneLiner_starts_with?: String;
  oneLiner_not_starts_with?: String;
  oneLiner_ends_with?: String;
  oneLiner_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  stage?: Int;
  stage_not?: Int;
  stage_in?: Int[] | Int;
  stage_not_in?: Int[] | Int;
  stage_lt?: Int;
  stage_lte?: Int;
  stage_gt?: Int;
  stage_gte?: Int;
  private?: Boolean;
  private_not?: Boolean;
  AND?: InfoWhereInput[] | InfoWhereInput;
  OR?: InfoWhereInput[] | InfoWhereInput;
  NOT?: InfoWhereInput[] | InfoWhereInput;
}

export interface UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput;
  create: UserCreateWithoutProjectsInput;
}

export interface ProjectUpsertWithoutVotesInput {
  update: ProjectUpdateWithoutVotesDataInput;
  create: ProjectCreateWithoutVotesInput;
}

export interface ProjectCreateInput {
  info?: InfoCreateOneInput;
  urls?: URLCreateOneInput;
  creator?: UserCreateOneWithoutProjectsInput;
  votes?: VoteCreateManyWithoutProjectInput;
}

export interface ProjectUpdateInput {
  info?: InfoUpdateOneInput;
  urls?: URLUpdateOneInput;
  creator?: UserUpdateOneWithoutProjectsInput;
  votes?: VoteUpdateManyWithoutProjectInput;
}

export interface InfoCreateOneInput {
  create?: InfoCreateInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface URLCreateOneInput {
  create?: URLCreateInput;
}

export interface URLSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: URLWhereInput;
  AND?: URLSubscriptionWhereInput[] | URLSubscriptionWhereInput;
  OR?: URLSubscriptionWhereInput[] | URLSubscriptionWhereInput;
  NOT?: URLSubscriptionWhereInput[] | URLSubscriptionWhereInput;
}

export interface URLCreateInput {
  devpost?: String;
  github?: String;
  slack?: String;
  instagram?: String;
  twitter?: String;
  web?: String;
  imagesUrl?: URLCreateimagesUrlInput;
}

export interface InfoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InfoWhereInput;
  AND?: InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput;
  OR?: InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput;
  NOT?: InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput;
}

export interface URLCreateimagesUrlInput {
  set?: String[] | String;
}

export interface URLWhereInput {
  devpost?: String;
  devpost_not?: String;
  devpost_in?: String[] | String;
  devpost_not_in?: String[] | String;
  devpost_lt?: String;
  devpost_lte?: String;
  devpost_gt?: String;
  devpost_gte?: String;
  devpost_contains?: String;
  devpost_not_contains?: String;
  devpost_starts_with?: String;
  devpost_not_starts_with?: String;
  devpost_ends_with?: String;
  devpost_not_ends_with?: String;
  github?: String;
  github_not?: String;
  github_in?: String[] | String;
  github_not_in?: String[] | String;
  github_lt?: String;
  github_lte?: String;
  github_gt?: String;
  github_gte?: String;
  github_contains?: String;
  github_not_contains?: String;
  github_starts_with?: String;
  github_not_starts_with?: String;
  github_ends_with?: String;
  github_not_ends_with?: String;
  slack?: String;
  slack_not?: String;
  slack_in?: String[] | String;
  slack_not_in?: String[] | String;
  slack_lt?: String;
  slack_lte?: String;
  slack_gt?: String;
  slack_gte?: String;
  slack_contains?: String;
  slack_not_contains?: String;
  slack_starts_with?: String;
  slack_not_starts_with?: String;
  slack_ends_with?: String;
  slack_not_ends_with?: String;
  instagram?: String;
  instagram_not?: String;
  instagram_in?: String[] | String;
  instagram_not_in?: String[] | String;
  instagram_lt?: String;
  instagram_lte?: String;
  instagram_gt?: String;
  instagram_gte?: String;
  instagram_contains?: String;
  instagram_not_contains?: String;
  instagram_starts_with?: String;
  instagram_not_starts_with?: String;
  instagram_ends_with?: String;
  instagram_not_ends_with?: String;
  twitter?: String;
  twitter_not?: String;
  twitter_in?: String[] | String;
  twitter_not_in?: String[] | String;
  twitter_lt?: String;
  twitter_lte?: String;
  twitter_gt?: String;
  twitter_gte?: String;
  twitter_contains?: String;
  twitter_not_contains?: String;
  twitter_starts_with?: String;
  twitter_not_starts_with?: String;
  twitter_ends_with?: String;
  twitter_not_ends_with?: String;
  web?: String;
  web_not?: String;
  web_in?: String[] | String;
  web_not_in?: String[] | String;
  web_lt?: String;
  web_lte?: String;
  web_gt?: String;
  web_gte?: String;
  web_contains?: String;
  web_not_contains?: String;
  web_starts_with?: String;
  web_not_starts_with?: String;
  web_ends_with?: String;
  web_not_ends_with?: String;
  AND?: URLWhereInput[] | URLWhereInput;
  OR?: URLWhereInput[] | URLWhereInput;
  NOT?: URLWhereInput[] | URLWhereInput;
}

export interface UserCreateOneWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput;
  connect?: UserWhereUniqueInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  project?: ProjectWhereInput;
  user?: UserWhereInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface UserCreateWithoutProjectsInput {
  name: String;
  email: String;
  password: String;
  votes?: VoteCreateManyWithoutUserInput;
}

export interface VoteCreateInput {
  project: ProjectCreateOneWithoutVotesInput;
  user: UserCreateOneWithoutVotesInput;
}

export interface VoteCreateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  projects?: ProjectUpdateManyWithoutCreatorInput;
  votes?: VoteUpdateManyWithoutUserInput;
}

export interface VoteCreateWithoutUserInput {
  project: ProjectCreateOneWithoutVotesInput;
}

export interface URLUpdateManyMutationInput {
  devpost?: String;
  github?: String;
  slack?: String;
  instagram?: String;
  twitter?: String;
  web?: String;
  imagesUrl?: URLUpdateimagesUrlInput;
}

export interface ProjectCreateOneWithoutVotesInput {
  create?: ProjectCreateWithoutVotesInput;
  connect?: ProjectWhereUniqueInput;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface ProjectCreateWithoutVotesInput {
  info?: InfoCreateOneInput;
  urls?: URLCreateOneInput;
  creator?: UserCreateOneWithoutProjectsInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutCreatorInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutCreatorDataInput;
  create: ProjectCreateWithoutCreatorInput;
}

export interface VoteCreateManyWithoutProjectInput {
  create?: VoteCreateWithoutProjectInput[] | VoteCreateWithoutProjectInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface ProjectUpdateWithoutCreatorDataInput {
  info?: InfoUpdateOneInput;
  urls?: URLUpdateOneInput;
  votes?: VoteUpdateManyWithoutProjectInput;
}

export interface VoteCreateWithoutProjectInput {
  user: UserCreateOneWithoutVotesInput;
}

export interface ProjectUpdateManyWithoutCreatorInput {
  create?:
    | ProjectCreateWithoutCreatorInput[]
    | ProjectCreateWithoutCreatorInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutCreatorInput[]
    | ProjectUpdateWithWhereUniqueWithoutCreatorInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutCreatorInput[]
    | ProjectUpsertWithWhereUniqueWithoutCreatorInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
}

export interface VoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  OR?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  NOT?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateWithoutVotesInput {
  name: String;
  email: String;
  password: String;
  projects?: ProjectCreateManyWithoutCreatorInput;
}

export interface VoteUpdateWithoutProjectDataInput {
  user?: UserUpdateOneRequiredWithoutVotesInput;
}

export interface ProjectCreateManyWithoutCreatorInput {
  create?:
    | ProjectCreateWithoutCreatorInput[]
    | ProjectCreateWithoutCreatorInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface InfoUpdateManyMutationInput {
  title?: String;
  oneLiner?: String;
  description?: String;
  stage?: Int;
  private?: Boolean;
}

export interface ProjectCreateWithoutCreatorInput {
  info?: InfoCreateOneInput;
  urls?: URLCreateOneInput;
  votes?: VoteCreateManyWithoutProjectInput;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export interface InfoUpdateOneInput {
  create?: InfoCreateInput;
  update?: InfoUpdateDataInput;
  upsert?: InfoUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  projects_every?: ProjectWhereInput;
  projects_some?: ProjectWhereInput;
  projects_none?: ProjectWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface InfoUpdateDataInput {
  title?: String;
  oneLiner?: String;
  description?: String;
  stage?: Int;
  private?: Boolean;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface InfoUpsertNestedInput {
  update: InfoUpdateDataInput;
  create: InfoCreateInput;
}

export interface VoteUpsertWithWhereUniqueWithoutProjectInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutProjectDataInput;
  create: VoteCreateWithoutProjectInput;
}

export interface URLUpdateOneInput {
  create?: URLCreateInput;
  update?: URLUpdateDataInput;
  upsert?: URLUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface URLUpdateDataInput {
  devpost?: String;
  github?: String;
  slack?: String;
  instagram?: String;
  twitter?: String;
  web?: String;
  imagesUrl?: URLUpdateimagesUrlInput;
}

export interface UserUpdateWithoutVotesDataInput {
  name?: String;
  email?: String;
  password?: String;
  projects?: ProjectUpdateManyWithoutCreatorInput;
}

export interface URLUpdateimagesUrlInput {
  set?: String[] | String;
}

export interface VoteUpdateWithWhereUniqueWithoutProjectInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutProjectDataInput;
}

export interface URLUpsertNestedInput {
  update: URLUpdateDataInput;
  create: URLCreateInput;
}

export interface VoteUpdateManyWithoutProjectInput {
  create?: VoteCreateWithoutProjectInput[] | VoteCreateWithoutProjectInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutProjectInput[]
    | VoteUpdateWithWhereUniqueWithoutProjectInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutProjectInput[]
    | VoteUpsertWithWhereUniqueWithoutProjectInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface UserUpdateOneWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput;
  update?: UserUpdateWithoutProjectsDataInput;
  upsert?: UserUpsertWithoutProjectsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  info?: InfoWhereInput;
  urls?: URLWhereInput;
  creator?: UserWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface UserUpdateWithoutProjectsDataInput {
  name?: String;
  email?: String;
  password?: String;
  votes?: VoteUpdateManyWithoutUserInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  projects?: ProjectCreateManyWithoutCreatorInput;
  votes?: VoteCreateManyWithoutUserInput;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutCreatorInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutCreatorDataInput;
}

export interface ProjectUpdateWithoutVotesDataInput {
  info?: InfoUpdateOneInput;
  urls?: URLUpdateOneInput;
  creator?: UserUpdateOneWithoutProjectsInput;
}

export interface ProjectUpdateOneRequiredWithoutVotesInput {
  create?: ProjectCreateWithoutVotesInput;
  update?: ProjectUpdateWithoutVotesDataInput;
  upsert?: ProjectUpsertWithoutVotesInput;
  connect?: ProjectWhereUniqueInput;
}

export interface VoteUpdateWithoutUserDataInput {
  project?: ProjectUpdateOneRequiredWithoutVotesInput;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: UserCreateWithoutVotesInput;
  update?: UserUpdateWithoutVotesDataInput;
  upsert?: UserUpsertWithoutVotesInput;
  connect?: UserWhereUniqueInput;
}

export interface ProjectScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  OR?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  NOT?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
}

export interface VoteUpdateInput {
  project?: ProjectUpdateOneRequiredWithoutVotesInput;
  user?: UserUpdateOneRequiredWithoutVotesInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface InfoCreateInput {
  title: String;
  oneLiner: String;
  description: String;
  stage: Int;
  private?: Boolean;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  project: <T = ProjectSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface InfoEdge {
  node: Info;
  cursor: String;
}

export interface InfoEdgePromise extends Promise<InfoEdge>, Fragmentable {
  node: <T = InfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InfoEdgeSubscription
  extends Promise<AsyncIterator<InfoEdge>>,
    Fragmentable {
  node: <T = InfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InfoConnection {
  pageInfo: PageInfo;
  edges: InfoEdge[];
}

export interface InfoConnectionPromise
  extends Promise<InfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InfoEdge>>() => T;
  aggregate: <T = AggregateInfoPromise>() => T;
}

export interface InfoConnectionSubscription
  extends Promise<AsyncIterator<InfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInfoSubscription>() => T;
}

export interface AggregateInfo {
  count: Int;
}

export interface AggregateInfoPromise
  extends Promise<AggregateInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInfoSubscription
  extends Promise<AsyncIterator<AggregateInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  projects: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Project {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  info: <T = InfoPromise>() => T;
  urls: <T = URLPromise>() => T;
  creator: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  info: <T = InfoSubscription>() => T;
  urls: <T = URLSubscription>() => T;
  creator: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateURL {
  count: Int;
}

export interface AggregateURLPromise
  extends Promise<AggregateURL>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateURLSubscription
  extends Promise<AsyncIterator<AggregateURL>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InfoSubscriptionPayload {
  mutation: MutationType;
  node: Info;
  updatedFields: String[];
  previousValues: InfoPreviousValues;
}

export interface InfoSubscriptionPayloadPromise
  extends Promise<InfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InfoPreviousValuesPromise>() => T;
}

export interface InfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InfoPreviousValuesSubscription>() => T;
}

export interface URLConnection {
  pageInfo: PageInfo;
  edges: URLEdge[];
}

export interface URLConnectionPromise
  extends Promise<URLConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<URLEdge>>() => T;
  aggregate: <T = AggregateURLPromise>() => T;
}

export interface URLConnectionSubscription
  extends Promise<AsyncIterator<URLConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<URLEdgeSubscription>>>() => T;
  aggregate: <T = AggregateURLSubscription>() => T;
}

export interface InfoPreviousValues {
  title: String;
  oneLiner: String;
  description: String;
  stage: Int;
  private: Boolean;
}

export interface InfoPreviousValuesPromise
  extends Promise<InfoPreviousValues>,
    Fragmentable {
  title: () => Promise<String>;
  oneLiner: () => Promise<String>;
  description: () => Promise<String>;
  stage: () => Promise<Int>;
  private: () => Promise<Boolean>;
}

export interface InfoPreviousValuesSubscription
  extends Promise<AsyncIterator<InfoPreviousValues>>,
    Fragmentable {
  title: () => Promise<AsyncIterator<String>>;
  oneLiner: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  stage: () => Promise<AsyncIterator<Int>>;
  private: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface URL {
  devpost?: String;
  github?: String;
  slack?: String;
  instagram?: String;
  twitter?: String;
  web?: String;
  imagesUrl: String[];
}

export interface URLPromise extends Promise<URL>, Fragmentable {
  devpost: () => Promise<String>;
  github: () => Promise<String>;
  slack: () => Promise<String>;
  instagram: () => Promise<String>;
  twitter: () => Promise<String>;
  web: () => Promise<String>;
  imagesUrl: () => Promise<String[]>;
}

export interface URLSubscription
  extends Promise<AsyncIterator<URL>>,
    Fragmentable {
  devpost: () => Promise<AsyncIterator<String>>;
  github: () => Promise<AsyncIterator<String>>;
  slack: () => Promise<AsyncIterator<String>>;
  instagram: () => Promise<AsyncIterator<String>>;
  twitter: () => Promise<AsyncIterator<String>>;
  web: () => Promise<AsyncIterator<String>>;
  imagesUrl: () => Promise<AsyncIterator<String[]>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface URLEdge {
  node: URL;
  cursor: String;
}

export interface URLEdgePromise extends Promise<URLEdge>, Fragmentable {
  node: <T = URLPromise>() => T;
  cursor: () => Promise<String>;
}

export interface URLEdgeSubscription
  extends Promise<AsyncIterator<URLEdge>>,
    Fragmentable {
  node: <T = URLSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface URLPreviousValues {
  devpost?: String;
  github?: String;
  slack?: String;
  instagram?: String;
  twitter?: String;
  web?: String;
  imagesUrl: String[];
}

export interface URLPreviousValuesPromise
  extends Promise<URLPreviousValues>,
    Fragmentable {
  devpost: () => Promise<String>;
  github: () => Promise<String>;
  slack: () => Promise<String>;
  instagram: () => Promise<String>;
  twitter: () => Promise<String>;
  web: () => Promise<String>;
  imagesUrl: () => Promise<String[]>;
}

export interface URLPreviousValuesSubscription
  extends Promise<AsyncIterator<URLPreviousValues>>,
    Fragmentable {
  devpost: () => Promise<AsyncIterator<String>>;
  github: () => Promise<AsyncIterator<String>>;
  slack: () => Promise<AsyncIterator<String>>;
  instagram: () => Promise<AsyncIterator<String>>;
  twitter: () => Promise<AsyncIterator<String>>;
  web: () => Promise<AsyncIterator<String>>;
  imagesUrl: () => Promise<AsyncIterator<String[]>>;
}

export interface URLSubscriptionPayload {
  mutation: MutationType;
  node: URL;
  updatedFields: String[];
  previousValues: URLPreviousValues;
}

export interface URLSubscriptionPayloadPromise
  extends Promise<URLSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = URLPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = URLPreviousValuesPromise>() => T;
}

export interface URLSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<URLSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = URLSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = URLPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Info {
  title: String;
  oneLiner: String;
  description: String;
  stage: Int;
  private: Boolean;
}

export interface InfoPromise extends Promise<Info>, Fragmentable {
  title: () => Promise<String>;
  oneLiner: () => Promise<String>;
  description: () => Promise<String>;
  stage: () => Promise<Int>;
  private: () => Promise<Boolean>;
}

export interface InfoSubscription
  extends Promise<AsyncIterator<Info>>,
    Fragmentable {
  title: () => Promise<AsyncIterator<String>>;
  oneLiner: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  stage: () => Promise<AsyncIterator<Int>>;
  private: () => Promise<AsyncIterator<Boolean>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Info",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "URL",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
